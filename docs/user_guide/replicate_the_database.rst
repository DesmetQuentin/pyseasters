Replicate the database
======================

This guide is for data maintainers to replicate the database PySEASTERS relies on.
It is structured as follows:

.. contents::
   :backlinks: none
   :local:


.. important::

   Step ordering matters!


.. _replicate-1:

1. File structure
-----------------

The database file structure is not generated by PySEASTERS at any point.
Thus, it must be generated manually prior to following anything else in this guide.

**(1)** First, choose a data directory (e.g., ``/your/working/directory/PySEASTERS_DATA``;
if you work in a group, using a shared storage is generally a good idea).

**(2)** Then, from the chosen data directory,
type:

.. code:: bash

   mkdir -p GHCNd/{data,metadata}


**(3)** As a result,
you should now get the following when running ``tree``:

.. code:: console

   $ tree -d .
   .
   └── GHCNd
       ├── data
       └── metadata

   3 directories


.. _replicate-2:

2. Link PySEASTERS with the data
--------------------------------

You have installed PySEASTERS using the :doc:`installation guide <install>`,
and you have created the correct data structure in a chose directory.
You now need to let PySEASTERS know where is your data.

**Long story short:** We suggest creating a ``configure_api.py`` file
in the data directory root, containing the following Python script:

.. code:: python

   """
   Running this script configures the current directory to be the root data
   directory where the PySEASTERS Python package looks at for loading data.

   Usage:
       python configure_api.py
   """
   import importlib.util
   import sys
   from pathlib import Path

   if __name__ == "__main__":
       # Package existence check
       spec = importlib.util.find_spec("pyseasters")
       if not spec:
           sys.stderr.write("Failure: Package `pyseasters` not found.\n")
           sys.stderr.write("Install it then re-run.\n")
           sys.exit(1)

       # Write data directory in 'pyseasters/constants/data/path.txt'
       file = Path(spec.origin).parent / "constants" / "data" / "path.txt"
       file.write_text(str(Path(__name__).parent))
       sys.stdout.write("API configuration completed!\n")
       sys.exit(0)


.. note::

   Concretely, PySEASTERS reads the data directory root in a one-line ``txt`` file
   located at ``<pyseasters>/constants/data/path.txt``
   (``<pyseasters>`` referring to the package location,
   that is, where the package's ``__init__.py`` file is located).
   The proposed ``configure_api.py`` script simply creates the ``path.txt`` file based
   on where the script is located.


.. important::

   ``configure_api.py`` only works if located in the data directory root!


.. note::

   Placing ``configure_api.py`` at the data root directory
   also allows all members of your group to link their own installation of
   PySEASTERS with the shared data without needing to provide any path in argument.
   This is a clean and easy way to configure the framework.


.. _generate-download-script:
.. _replicate-3:

3. Download
-----------

.. important::

   This requires installing the command-line interface, as guided
   :ref:`here <install-cli>`.


PySEASTERS command-line interface (CLI) provides the ``generate_download_script``
command. Running a help does the following:

.. code:: console

   $ generate_download_script --help
   usage: generate_download_script [-h] [-o OUTPUT] key

   Generate a download bash script for the desired data.

   positional arguments:
   key                   key associated with the desired data (one of 'GHCNd','GHCNd metadata')

   options:
   -h, --help            show this help message and exit
   -o OUTPUT, --output OUTPUT
                         path to output file (default: print to stdout)


For example, for generating a download script to get GHCNd metadata,
you could run:

.. code:: console

   $ generate_download_script 'GHCNd metadata'
   #!/bin/bash

   wget https://www.ncei.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt
   wget https://www.ncei.noaa.gov/pub/data/ghcn/daily/ghcnd-inventory.txt


The download script must later be ran in the destination directory.
Thus, let ``$file`` be your destination file for containing the script
(that is, something like ``$PySEASTERS_DATA/GHCNd/metadata/download.sh``),
you may type one of the two equivalent commands to generate it:

.. code:: bash

   generate_download_script 'GHCNd metadata' > $file


or

.. code:: bash

   generate_download_script -o $file 'GHCNd metadata'


Then, in the directory of your file, run ``bash $file``
(or something like ``nohup bash $file &`` for running it in background).


.. note::

   It is quite intuitive, but just making sure it's understood:
   files from a certain source must be downloaded in the directory named after it,
   e.g., GHCNd metadata files in ``$PySEASTERS_DATA/GHCNd/metadata``, GHCNd data files
   in ``$PySEASTERS/GHCNd/data``, etc.
   This then allows PySEASTERS API to locate everything from the data root directory
   as configured in :ref:`Step 2<replicate-2>`,
   without reccurringly asking for specific data locations.


.. _replicate-4:
.. _preprocess:

4. Preprocess
-------------

PySEASTERS API does not deal with the raw data,
but rather with "optimized" versions
enabling **faster loading** and **lighter storage space**.
This means downloading the data is not enough,
and a preprocessing step is required
before the database is fully operational.
Unlike for generating download scripts,
each data type has its own preprocessing command.
All preprocessing commands are listed below:

* ``preprocess_ghcnd_metadata``
* ``preprocess_ghcnd_data``

Each command can generate a helping page when ran with the ``--help`` option.
You may then proceed to running the commands adequately, until all data is ready.
As an example:

.. code:: console

   $ preprocess_ghcnd_metadata --help
   usage: preprocess_ghcnd_metadata [-h] [-m] [-v] [-s] [-f]

   Preprocess GHCNd metadata files (filter countries, remove duplicate columns and compress).

   options:
   -h, --help     show this help message and exit
   -m, --minimal  keep orignial csv format (default: convert to parquet)
   -v, --verbose  enable debug output
   -s, --silent   disable info output (priority to --verbose)
   -f, --force    disable confirmation prompt
   $
   $ # Below, actually running the program with verbose
   $ # (console output is replaced by "...")
   $ preprocess_ghcnd_metadata -v
   This program modifies files in place. Are you sure you want to continue? (y/[n]): y
   ...


.. _download-preprocess-order:

Download--preprocess order
--------------------------

A last word is required because some downloading and preprocessing commands
are order-sensitive. All such cases are listed below:

* **GHCNd data:** Downloading requires preprocessed GHCNd metadata.
